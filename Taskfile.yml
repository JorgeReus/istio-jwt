version: '3'

vars:
  CLUSTER_NAME: istio-test
  REGISTRY_PORT: 5050

includes:
  auth:
    taskfile: ./auth-service/Taskfile.yml
    dir: ./auth-service
  authz: 
    taskfile: ./authz-service/Taskfile.yml
    dir: ./authz-service

tasks:
  create-cluster:
    run: once
    cmds:
      - k3d cluster create {{.CLUSTER_NAME}} -a {{.NUM_WORKER_NODES}} --registry-create {{.CLUSTER_NAME}}-registry:0.0.0.0:{{.REGISTRY_PORT}} --k3s-arg "--no-deploy=traefik@server:*"
    vars:
      NUM_WORKER_NODES: 3

  destroy-cluster:
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}

  build-all-images:
    cmds:
      - task: auth:docker-build
      - task: authz:docker-build

  push-all-images:
    deps: [build-all-images]
    cmds:
      - task: push-image
        vars: {IMAGE: auth-service:latest}
      - task: push-image
        vars: {IMAGE: authz-service:latest}
      - task: push-image
        vars: {IMAGE: nginx:latest}

  push-image:
    cmds:
      - docker tag {{.IMAGE}} localhost:{{.REGISTRY_PORT}}/{{.IMAGE}}
      - docker push localhost:{{.REGISTRY_PORT}}/{{.IMAGE}}

  install-istio:
    dir: ./terraform/infra
    cmds:
      - terraform init
      - terraform apply --auto-approve

  uninstall-istio:
    dir: ./terraform/infra
    cmds:
      - terraform destroy --auto-approve

  configure-istio:
    deps: [install-istio]
    dir: ./terraform/ops
    cmds:
      - terraform init
      - terraform apply --auto-approve

  unconfigure-istio:
    dir: ./terraform/ops
    cmds:
      - terraform destroy --auto-approve

  setup:
    cmds:
      - task: create-cluster
      - task: push-all-images
      - task: install-istio
      - task: configure-istio

  cleanup:
    cmds:
      - task: unconfigure-istio
      - task: uninstall-istio
      - task: destroy-cluster


  get-istio-ip:
    cmds:
      - kubectl get svc istio-gateway -n istio-system -o jsonpath="{.status.loadBalancer.ingress[0].ip}"

  get-invalid-jwt:
    cmds:
      - |
        ISTIO_IP=$(kubectl get svc istio-gateway -n istio-system -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        JWT_URL="http://${ISTIO_IP}/auth/jwt/generate"
        curl -s -X POST ${JWT_URL} \
        -H 'accept: application/json' \
        -H 'Content-Type: application/json' \
        -d '{
        "fqn": "Developer",
        "groups": [
          "dev"
        ],
        "subject": "Developer"
        }' | jq -r .id_token

  get-valid-jwt:
    cmds:
      - |
        ISTIO_IP=$(kubectl get svc istio-gateway -n istio-system -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        JWT_URL="http://${ISTIO_IP}/auth/jwt/generate"
        curl -s -X POST ${JWT_URL} \
        -H 'accept: application/json' \
        -H 'Content-Type: application/json' \
        -d '{
        "fqn": "MyAdmin",
        "groups": [
          "admin"
        ],
        "subject": "Admin"
        }' | jq -r .id_token
